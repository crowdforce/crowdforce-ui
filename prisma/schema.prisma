// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TelegramAccount {
  id        Int      @id
  username  String
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  photoUrl  String   @map("photo_url")
  authDate  DateTime @map("auth_date")

  User User[]

  @@map("telegram_accounts")
}

// model Account {
//   id                String  @id @default(cuid())
//   userId            String  @map("user_id")
//   type              String
//   provider          String
//   providerAccountId String  @map("provider_account_id")
//   refresh_token     String? @db.Text
//   access_token      String? @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.Text
//   session_state     String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
//   @@map("accounts")
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique @map("session_token")
//   userId       String   @map("user_id")
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@map("sessions")
// }

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  enabled Boolean @default(true)

  telegramId Int             @map("telegram_id")
  telegram   TelegramAccount @relation(fields: [telegramId], references: [id], onDelete: Cascade)

  projects Project[]

  @@map("users")
}

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime
enum ProjectStatus {
  Init
  Active
  // Archive
  // Banned

  @@map("project_status")
}

//   @@unique([identifier, token])
//   @@map("verificationtokens")
enum FeatureStatus {
  Active
  Deleted

  @@map("feature_status")
}

model MapViewport {
  id       String  @id @default(cuid())
  lng      Float
  lat      Float
  zoom     Float
  minZoom  Float   @default(0) @map(name: "min_zoom")
  maxZoom  Float   @default(22) @map(name: "max_zoom")
  pitch    Float   @default(0)
  minPitch Float   @default(0) @map(name: "min_pitch")
  maxPitch Float   @default(85) @map(name: "max_pitch")
  bearing  Float   @default(0)
  isFlat   Boolean @default(true) @map(name: "is_flat")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  projects Project[] @relation()

  @@map(name: "viewports")
}

model Project {
  id          String        @id @default(cuid())
  title       String
  description String
  imageUrl    String?       @map(name: "image_url")
  status      ProjectStatus

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id])

  viewportId String
  viewport   MapViewport @relation(fields: [viewportId], references: [id])

  features Feature[]

  @@map(name: "projects")
}

model Feature {
  id          String  @id @default(cuid())
  title       String?
  description String?
  imageUrl    String? @map(name: "image_url")

  // objectTypeId Int
  // objectType   ObjectType? @relation("objectType", fields: [objectTypeId], references: [id])

  status FeatureStatus

  // lng Float
  // lat Float

  // Point or Polygon
  geometry Json

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  deletedAt DateTime @default(now()) @map(name: "deleted_at")

  @@map(name: "features")
}
// }
