// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider   = "prisma-dbml-generator"
  // output     = "../dbml"
  outputName = "prisma.dbml"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  Admin
  User

  @@map("user_role")
}

enum ProjectStatus {
  Init
  Active
  // Archive
  // Banned

  @@map("project_status")
}

enum FeatureStatus {
  Active
  Deleted

  @@map("feature_status")
}

enum TaskStatus {
  Open
  // WaitActor
  // ActorAssigned
  // WaitSubmission
  // Processing
  // Submitted
  // Declined
  // Done

  @@map("task_status")
}

enum UserResponseStatus {
  Participant
  Leader

  @@map("user_response_status")
}

enum FeatureType {
  Unknown
  Border
  Tree
  Lawn
  Bush
  Flowers
  GardenBed

  @@map("feature_type")
}

model TelegramAccount {
  id        Int      @id
  username  String
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  photoUrl  String   @map("photo_url")
  authDate  DateTime @map("auth_date")

  User User[]

  @@map("telegram_accounts")
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          UserRole  @default(User)

  enabled Boolean @default(true)

  telegramId Int             @map("telegram_id")
  telegram   TelegramAccount @relation(fields: [telegramId], references: [id], onDelete: Cascade)

  projects Project[]
  follows  UserFollows[]
  tasks    UserResponse[]
  assets   Asset[]

  @@map("users")
}

model MapViewport {
  id       String  @id @default(cuid())
  lng      Float
  lat      Float
  zoom     Float
  minZoom  Float   @default(0) @map(name: "min_zoom")
  maxZoom  Float   @default(22) @map(name: "max_zoom")
  pitch    Float   @default(0)
  minPitch Float   @default(0) @map(name: "min_pitch")
  maxPitch Float   @default(85) @map(name: "max_pitch")
  bearing  Float   @default(0)
  isFlat   Boolean @default(true) @map(name: "is_flat")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  projects Project[] @relation()

  @@map(name: "viewports")
}

model Project {
  id          String        @id @default(cuid())
  title       String
  description String
  imageUrl    String?       @map(name: "image_url")
  status      ProjectStatus
  address     String        @default("")
  permalink   String        @default("")

  coverId String? @map(name: "cover_id")
  cover   Asset?  @relation(fields: [coverId], references: [id])

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  ownerId String @map(name: "owner_id")
  owner   User   @relation(fields: [ownerId], references: [id])

  viewportId String      @map(name: "viewport_id")
  viewport   MapViewport @relation(fields: [viewportId], references: [id])

  features    Feature[]
  follows     UserFollows[]
  tasks       Task[]
  topProjects TopProjects[]

  @@map(name: "projects")
}

model TopProjects {
  projectId String  @id
  project   Project @relation(fields: [projectId], references: [id])

  createdAt DateTime @default(now()) @map(name: "created_at")

  @@map(name: "top_projects")
}

model Asset {
  id        String  @id @default(cuid())
  mimeType  String
  filename  String
  src       String
  size      Int
  sha256    String
  thumbnail String?

  ownerId String @map(name: "owner_id")
  owner   User   @relation(fields: [ownerId], references: [id])

  createdAt DateTime @default(now()) @map(name: "created_at")

  width  Int?
  height Int?

  projects Project[]

  @@map(name: "assets")
}

model Feature {
  id          String  @id @default(cuid())
  title       String?
  description String?
  imageUrl    String? @map(name: "image_url")

  // objectTypeId Int
  // objectType   ObjectType? @relation("objectType", fields: [objectTypeId], references: [id])

  status FeatureStatus @default(Active)
  type   FeatureType   @default(Unknown)

  geometry Json

  projectId String  @map(name: "project_id")
  project   Project @relation(fields: [projectId], references: [id])

  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @default(now()) @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")

  tasks FeaturesForTask[]

  @@map(name: "features")
}

model Task {
  id          String @id @default(cuid())
  title       String
  description String

  status TaskStatus @default(Open)

  // eventId  Int   @map("eventId")
  // schedule Event @relation(fields: [eventId], references: [id])

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  startAt DateTime @default(now()) @map(name: "start_at")
  endAt   DateTime @default(now()) @map(name: "end_at")

  // operationTypeId Int
  // operationType   OperationType @relation(fields: [operationTypeId], references: [id])

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  features FeaturesForTask[]
  users    UserResponse[]

  @@map(name: "tasks")
}

model FeaturesForTask {
  featureId String  @map("feature_id")
  feature   Feature @relation(fields: [featureId], references: [id])

  taskId String @map("task_id")
  task   Task   @relation(fields: [taskId], references: [id])

  @@id([featureId, taskId])
  @@map(name: "feature_tasks")
}

model UserResponse {
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  taskId String @map("task_id")
  task   Task   @relation(fields: [taskId], references: [id])

  createAt DateTime? @map(name: "created_at")

  status UserResponseStatus @default(Participant)

  @@id([userId, taskId])
  @@map(name: "user_responses")
}

model UserFollows {
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  projectId String  @map("project_id")
  project   Project @relation(fields: [projectId], references: [id])

  active Boolean

  followedAt   DateTime? @map(name: "followed_at")
  unfollowedAt DateTime? @map(name: "unfollowed_at")

  @@id([userId, projectId])
  @@index([active])
  @@map(name: "user_follows")
}
